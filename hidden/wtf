<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Invoice/Statement Generator</title>
  <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 20px;
            background-color: #f9f9f9;
            color: #333;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            flex-direction: column;
        }

        button, input[type="file"] {
            padding: 10px 20px;
            font-size: 16px;
            margin: 10px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            background-color: #4CAF50;
            color: white;
            transition: background-color 0.3s ease;
        }

        button:hover, input[type="file"]:hover {
            background-color: #45a049;
        }

        input[type="file"] {
            background-color: #2196F3;
        }

        input[type="file"]::file-selector-button {
            background-color: #2196F3;
            color: white;
            border: none;
            padding: 10px 20px;
            cursor: pointer;
            border-radius: 5px;
            transition: background-color 0.3s ease;
        }

        input[type="file"]::file-selector-button:hover {
            background-color: #1976D2;
        }

        button:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
        }
  </style>
  <!-- Use SheetJS for Excel file creation -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
</head>
<body>
  <h2>PDF Data Extractor with Template</h2>
  <input type="file" id="pdfFile" accept=".pdf" />

  <script>
    // Listen for file selection
    document.getElementById('pdfFile').addEventListener('change', handleFile, false);

    async function handleFile(event) {
      const file = event.target.files[0];
      if (!file) return;
    }
    const tableBody = document.getElementById('tableBody');
    if (tableBody) {
      tableData.forEach(row => {
        const tr = document.createElement('tr');
        tr.innerHTML = `
          <td>${row.claimNumber}</td>
          <td>${row.serviceDate}</td>
          <td>${row.procedure}</td>
          <td>${row.units}</td>
          <td>${row.lineTotal}</td>
          <td>${row.patientPaid}</td>
          <td>${row.insurancePaid}</td>
          <td>${row.adjustments}</td>
          <td>${row.balance}</td>
          <td>${row.payment}</td>
        `;
        tableBody.appendChild(tr);
      });
    } else {
      console.error("Table body element not found!");
    }
    let extractedData = [];

document.getElementById('fileInput').addEventListener('change', async (event) => {
    const file = event.target.files[0];
    if (file) {
        try {
            console.log('Loading PDF.js...');
            if (typeof pdfjsLib === 'undefined') {
                throw new Error('PDF.js library is not loaded');
            }

            const arrayBuffer = await file.arrayBuffer();
            const pdfData = new Uint8Array(arrayBuffer);

            pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.10.377/pdf.worker.min.js';
            const pdf = await pdfjsLib.getDocument({ data: pdfData }).promise;

            extractedData = [];

            for (let i = 1; i <= pdf.numPages; i++) {
                const page = await pdf.getPage(i);
                const textContent = await page.getTextContent();

                console.log(`Extracting page ${i}`); // Debugging

                let line = '';
                let lastY = null;

                if (textContent.items.length > 0) {
                    textContent.items.forEach((item) => {
                        if (lastY !== null && Math.abs(item.transform[5] - lastY) > 10) {
                            extractedData.push(line.trim());
                            line = '';
                        }
                        line += item.str + ' ';
                        lastY = item.transform[5];
                    });

                    if (line.trim()) {
                        extractedData.push(line.trim());
                    }
                } else {
                    console.log(`Page ${i} contains no text, attempting OCR`);
                    await extractTextFromImage(page);
                }
            }

            console.log(extractedData); // Debugging
            if (extractedData.length > 0) {
                alert('PDF data extracted successfully!');
                document.getElementById('exportExcelBtn').disabled = false;
            } else {
                alert('No readable text extracted.');
            }

        } catch (error) {
            console.error('Error extracting PDF data:', error);
            alert('Failed to extract data. Check the console for details.');
        }
    }
});

async function extractTextFromImage(page) {
    try {
        const viewport = page.getViewport({ scale: 1.0 });
        const canvas = document.createElement("canvas");
        const context = canvas.getContext("2d");
        canvas.height = viewport.height;
        canvas.width = viewport.width;

        console.log('Rendering page to canvas');
        await page.render({ canvasContext: context, viewport }).promise;

        console.log('Loading Tesseract.js');
        const { createWorker } = await import('https://cdnjs.cloudflare.com/ajax/libs/tesseract.js/2.1.5/tesseract.min.js');

        const worker = await createWorker('eng');

        console.log('Starting OCR');
        const { data: { text } } = await worker.recognize(canvas);
        console.log('OCR Result:', text);

        extractedData.push(...text.split('\n').map(line => line.replace(/[^\x20-\x7E]/g, '').trim()).filter(line => line !== ''));

        await worker.terminate();
        console.log('OCR completed successfully');

    } catch (error) {
        console.error('Error during OCR:', error);
        alert(`Failed to process image with OCR: ${error.message}`);
    }
}

function exportToExcel() {
    if (extractedData.length === 0) {
        alert('No data to export!');
        return;
    }
// Function to process extracted data and populate the table
function processExtractedData(data) {
  const tableData = [];

  // Example: Parse extracted text into structured data
  data.forEach(text => {
    const lines = text.split('\n');
    lines.forEach(line => {
      if (line.includes("Claim Number:")) {
        const claimNumber = line.split("Claim Number:")[1]?.trim();
        const serviceDate = lines.find(l => l.includes("Service Date:"))?.split("Service Date:")[1]?.trim();
        const procedure = lines.find(l => l.includes("Procedure:"))?.split("Procedure:")[1]?.trim();
        const units = lines.find(l => l.includes("Units:"))?.split("Units:")[1]?.trim();
        const lineTotal = lines.find(l => l.includes("Line Total:"))?.split("Line Total:")[1]?.trim();
        const patientPaid = lines.find(l => l.includes("Patient Paid:"))?.split("Patient Paid:")[1]?.trim();
        const insurancePaid = lines.find(l => l.includes("Insurance Paid:"))?.split("Insurance Paid:")[1]?.trim();
        const adjustments = lines.find(l => l.includes("Adjustments:"))?.split("Adjustments:")[1]?.trim();
        const balance = lines.find(l => l.includes("Balance:"))?.split("Balance:")[1]?.trim();
        const payment = lines.find(l => l.includes("Payment:"))?.split("Payment:")[1]?.trim();

        if (claimNumber) {
          tableData.push({
            claimNumber,
            serviceDate,
            procedure,
            units,
            lineTotal,
            patientPaid,
            insurancePaid,
            adjustments,
            balance,
            payment
          });
        }
      }
    });
  });

  console.log('Processed Data:', tableData);
  return tableData;
}

// Function to populate the table with processed data
function populateTable(tableData) {
  const tableBody = document.getElementById('tableBody');
  tableBody.innerHTML = ''; // Clear existing rows

  tableData.forEach(row => {
    const tr = document.createElement('tr');
    tr.innerHTML = `
      <td>${row.claimNumber}</td>
      <td>${row.serviceDate}</td>
      <td>${row.procedure}</td>
      <td>${row.units}</td>
      <td>${row.lineTotal}</td>
      <td>${row.patientPaid}</td>
      <td>${row.insurancePaid}</td>
      <td>${row.adjustments}</td>
      <td>${row.balance}</td>
      <td>${row.payment}</td>
    `;
    tableBody.appendChild(tr);
  });
}
        // Add footer data to the worksheet
        const footerText = [
          "Disclaimer: Charges/adjustments made after statement date are not reflected in this statement.",
          "Please contact our office for any questions or concerns."
        ];
        XLSX.utils.sheet_add_aoa(worksheet, footerText, { origin: -1 }); // Add footer at the end

      // Define column widths
      ws['!cols'] = [
        { wch: 15 }, { wch: 12 }, { wch: 25 }, { wch: 10 }, { wch: 15 },
        { wch: 15 }, { wch: 15 }, { wch: 15 }, { wch: 15 }, { wch: 15 }
      ];
    // Create a worksheet
    const worksheet = XLSX.utils.aoa_to_sheet(extractedData.map(line => [line]));
      // Append the worksheet to the workbook with the sheet name "Invoice"
      XLSX.utils.book_append_sheet(wb, worksheet, "Invoice");
      // Save the workbook as an Excel file
      XLSX.writeFile(wb, "Invoice_Statement.xlsx");
    }
  </script>
</body>
</html>